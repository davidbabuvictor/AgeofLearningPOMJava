<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="JD" failures="5" tests="5" name="Age Of Learning Test Suite" time="4.2" errors="0" timestamp="2024-02-19T01:39:39 PST">
  <testcase classname="com.ageoflen.qa.testscases.AbcHomeTest" name="signUpButtonClick" time="1.125">
    <failure type="org.openqa.selenium.InvalidElementStateException" message="invalid element state: Failed to execute &amp;apos;evaluate&amp;apos; on &amp;apos;Document&amp;apos;: The string &amp;apos;.//*[@id=&amp;apos;email-input&amp;apos;])&amp;apos; is not a valid XPath expression.
  (Session info: chrome=121.0.6167.184)
Build info: version: &amp;apos;4.17.0&amp;apos;, revision: &amp;apos;e52b1be057*&amp;apos;
System info: os.name: &amp;apos;Windows 11&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;10.0&amp;apos;, java.version: &amp;apos;17.0.10&amp;apos;
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [01086941784253a02c62d347260a2676, executeScript {script=var getShadowElement = function getShadowElement(object,selector) {	if (object.shadowRoot !=null) {		return object.shadowRoot.querySelector(selector);	} else {		return null;	}};var getAllShadowElement = function getAllShadowElement(object,selector) {	return object.shadowRoot.querySelectorAll(selector);};var getAttribute = function getAttribute(object,attribute) {	return object.getAttribute(attribute);};var isVisible = function isVisible(object) {	var visible = object.offsetWidth;	if(visible&amp;gt;0) {		return true;	} else {		return false;	}};var scrollTo = function scrollTo(object) {	object.scrollIntoView({block: &amp;quot;center&amp;quot;, inline: &amp;quot;nearest&amp;quot;});};var getParentElement = function getParentElement(object) {	if(object.parentNode.nodeName==&amp;quot;#document-fragment&amp;quot;) {		return object.parentNode.host;	} else if(object.nodeName==&amp;quot;#document-fragment&amp;quot;) {		return object.host;	} else {		return object.parentElement;	}};var getChildElements = function getChildElements(object) {	elements = null;	if(object.nodeName==&amp;quot;#document-fragment&amp;quot;) {		elements = object.children;	} else {		elements = object.children;	}	if (object.shadowRoot!=null &amp;amp;&amp;amp; elements.length==0){		elements = object.shadowRoot.children;	}	return elements;};var getSiblingElements = function getSiblingElements(object) {	if(object.nodeName == &amp;quot;#document-fragment&amp;quot;) {		return object.host.children;	} else {		if(object.parentNode.nodeName==&amp;quot;#document-fragment&amp;quot;) {			return object.parentNode.children;		} else {			return object.parentElement.children;		}	}};var getSiblingElement = function getSiblingElement(object, selector) {	if(object.nodeName==&amp;quot;#document-fragment&amp;quot;) {		return object.host.querySelector(selector);	} else {		if(object.parentNode.nodeName==&amp;quot;#document-fragment&amp;quot;) {			return object.parentNode.querySelector(selector);		} else {			return object.parentElement.querySelector(selector);		}	}};var getNextSiblingElement = function getNextSiblingElement(object) {	if(object.nodeName==&amp;quot;#document-fragment&amp;quot;) {		return object.host.firstElementChild.nextElementSibling;	} else {		return object.nextElementSibling;	}};var getPreviousSiblingElement = function getPreviousSiblingElement(object) {	if(object.nodeName==&amp;quot;#document-fragment&amp;quot;) {		return null;	} else {		return object.previousElementSibling;	}};var isChecked = function isChecked(object) {	return object.checked;};var isDisabled = function isDisabled(object) {	return object.disabled;};var findCheckboxWithLabel = function findCheckboxWithLabel(label, root=document) {	if(root.nodeName==&amp;quot;PAPER-CHECKBOX&amp;quot;) {		if(root.childNodes[0].data.trimStart().trimEnd()==label) {			return root;		}	} else {		let all_checkbox = getAllObject(&amp;quot;paper-checkbox&amp;quot;, root);		for (let checkbox of all_checkbox) {			if(checkbox.childNodes[0].data.trimStart().trimEnd()==label) {				return checkbox;			}		}	}};var findRadioWithLabel = function findRadioWithLabel(label, root=document) {	if(root.nodeName==&amp;quot;PAPER-RADIO-BUTTON&amp;quot;) {		if(root.childNodes[0].data.trimStart().trimEnd()==label) {			return root;		}	} else {		let all_radio = getAllObject(&amp;quot;paper-radio-button&amp;quot;, root);		for (let radio of all_radio) {			if(radio.childNodes[0].data.trimStart().trimEnd()==label) {				return radio;			}		}	}};var selectCheckbox = function selectCheckbox(label, root=document) {	let checkbox = findCheckboxWithLabel(label, root);	if(!checkbox.checked) {		checbox.click();	}};var selectRadio = function selectRadio(label, root=document) {	let radio = findCheckboxWithLabel(label, root);	if(!radio.checked) {		radio.click();	}};var selectDropdown = function selectDropdown(label, root=document) {	if(root.nodeName==&amp;quot;PAPER-LISTBOX&amp;quot;) {		root.select(label);	} else {		let listbox = getAllObject(&amp;quot;paper-listbox&amp;quot;, root);		listbox.select(label);	}};var evaluateAllDeep = function evaluateAllDeep(selector, root) {	if(root==undefined) {		return collectAllElementsEvaluateDeep(selector, document);	} else {		return collectAllElementsEvaluateDeep(selector, root);	}};var evaluateDeep = function evaluateDeep(selector, root) {	if(root==undefined) {		return collectElementEvaluateDeep(selector, document);	} else {		return collectElementEvaluateDeep(selector, root);	}};var getXPathObject = function getXPathObject(selector, root = document) {	while (selector.search(/\//)!= 0 &amp;amp;&amp;amp; selector.search(/\//)!= -1) {    	selector = selector.replace(/\//,&amp;apos;//&amp;apos;);    }    while (selector.search(/\/\//)==0 &amp;amp;&amp;amp; selector.search(/\/\//) != -1) {    	selector = selector.replace(/\/\//,&amp;apos;&amp;apos;);    }	splitedSelectors = selector.split(&amp;apos;//&amp;apos;);		webElement = root;    for (let index = 0; index &amp;lt; splitedSelectors.length-1; index++) {        webElement = evaluateDeep(splitedSelectors[index], webElement);        if (webElement === undefined) {            throw new ElementNotFoundException(&amp;quot;Element with XPath &amp;quot;+splitedSelectors[index]+&amp;quot; couldn&amp;apos;t be found.&amp;quot;);        }    }    webElement = evaluateDeep(splitedSelectors[splitedSelectors.length-1], webElement);    return webElement;};var getXPathAllObject = function getXPathAllObject(selector, root = document) {	while (selector.search(/\//)!= 0 &amp;amp;&amp;amp; selector.search(/\//)!= -1) {    	selector = selector.replace(/\//,&amp;apos;//&amp;apos;);    }    while (selector.search(/\/\//)==0 &amp;amp;&amp;amp; selector.search(/\/\//) != -1) {    	selector = selector.replace(/\/\//,&amp;apos;&amp;apos;);    }	splitedSelectors = selector.split(&amp;apos;//&amp;apos;);    webElement = root;    for (let index = 0; index &amp;lt; splitedSelectors.length-1; index++) {        webElement = evaluateDeep(splitedSelectors[index], webElement);        if (webElement === undefined) {            return null;        }    }    webElement = evaluateAllDeep(splitedSelectors[splitedSelectors.length-1], webElement);    return webElement;};var querySelectorAllDeep = function querySelectorAllDeep(selector, root) {	if(root==undefined) {		return _querySelectorDeep(selector, true, document);	} else {		return _querySelectorDeep(selector, true, root);	}};var querySelectorDeep = function querySelectorDeep(selector, root) {	if(root==undefined) {		return _querySelectorDeep(selector, false, document);	} else {		return _querySelectorDeep(selector, false, root);	}};var ElementNotFoundException = function ElementNotFoundException(message = &amp;quot;Not found&amp;quot;) {  this.message = message;  this.name = &amp;apos;ElementNotFoundException&amp;apos;;};var getObject = function getObject(selector, root = document) {    const multiLevelSelectors = splitByCharacterUnlessQuoted(selector, &amp;apos;&amp;gt;&amp;apos;);    webElement = root;    for (let index = 0; index &amp;lt; multiLevelSelectors.length-1; index++) {        webElement = querySelectorDeep(multiLevelSelectors[index], webElement);        if (webElement === undefined) {            throw new ElementNotFoundException(&amp;quot;Element with CSS &amp;quot;+multiLevelSelectors[index]+&amp;quot; couldn&amp;apos;t be found.&amp;quot;);        }    }    webElement = querySelectorDeep(multiLevelSelectors[multiLevelSelectors.length-1], webElement);    return webElement;};var getAllObject = function getAllObject(selector, root = document) {    const multiLevelSelectors = splitByCharacterUnlessQuoted(selector, &amp;apos;&amp;gt;&amp;apos;);    webElement = root;    for (let index = 0; index &amp;lt; multiLevelSelectors.length-1; index++) {        webElement = querySelectorDeep(multiLevelSelectors[index], webElement);        if (webElement === undefined) {            return null;        }    }    webElement = querySelectorAllDeep(multiLevelSelectors[multiLevelSelectors.length-1], webElement);    return webElement;};function _querySelectorDeep(selector, findMany, root) {    let lightElement = root.querySelector(selector);    if (document.head.createShadowRoot || document.head.attachShadow) {        if (!findMany &amp;amp;&amp;amp; lightElement) {            return lightElement;        }        const selectionsToMake = splitByCharacterUnlessQuoted(selector, &amp;apos;,&amp;apos;);        return selectionsToMake.reduce((acc, minimalSelector) =&amp;gt; {            if (!findMany &amp;amp;&amp;amp; acc) {                return acc;            }            const splitSelector = splitByCharacterUnlessQuoted(minimalSelector                    .replace(/^\s+/g, &amp;apos;&amp;apos;)                    .replace(/\s*([&amp;gt;+~]+)\s*/g, &amp;apos;$1&amp;apos;), &amp;apos; &amp;apos;)                .filter((entry) =&amp;gt; !!entry);            const possibleElementsIndex = splitSelector.length - 1;            const possibleElements = collectAllElementsQuerySelectorDeep(splitSelector[possibleElementsIndex], root);            const findElements = findMatchingElement(splitSelector, possibleElementsIndex, root);            if (findMany) {                acc = acc.concat(possibleElements.filter(findElements));                return acc;            } else {                acc = possibleElements.find(findElements);                return acc;            }        }, findMany ? [] : null);    } else {        if (!findMany) {            return lightElement;        } else {            return root.querySelectorAll(selector);        }    }}function findMatchingElement(splitSelector, possibleElementsIndex, root) {    return (element) =&amp;gt; {        let position = possibleElementsIndex;        let parent = element;        let foundElement = false;        while (parent) {            const foundMatch = parent.matches(splitSelector[position]);            if (foundMatch &amp;amp;&amp;amp; position === 0) {                foundElement = true;                break;            }            if (foundMatch) {                position--;            }            parent = findParentOrHost(parent, root);        }        return foundElement;    };}function splitByCharacterUnlessQuoted(selector, character) {    return selector.match(/\\?.|^$/g).reduce((p, c) =&amp;gt; {        if (c === &amp;apos;&amp;quot;&amp;apos; &amp;amp;&amp;amp; !p.sQuote) {            p.quote ^= 1;            p.a[p.a.length - 1] += c;        } else if (c === &amp;apos;\&amp;apos;&amp;apos; &amp;amp;&amp;amp; !p.quote) {            p.sQuote ^= 1;            p.a[p.a.length - 1] += c;        } else if (!p.quote &amp;amp;&amp;amp; !p.sQuote &amp;amp;&amp;amp; c === character) {            p.a.push(&amp;apos;&amp;apos;);        } else {            p.a[p.a.length - 1] += c;        }        return p;    }, { a: [&amp;apos;&amp;apos;] }).a;}function findParentOrHost(element, root) {    const parentNode = element.parentNode;    return (parentNode &amp;amp;&amp;amp; parentNode.host &amp;amp;&amp;amp; parentNode.nodeType === 11) ? parentNode.host : parentNode === root ? null : parentNode;}function collectAllElementsQuerySelectorDeep(selector = null, root) {    const allElements = [];    const findAllElements = function(nodes) {        for (let i = 0, el; el = nodes[i]; ++i) {            allElements.push(el);            if (el.shadowRoot) {                findAllElements(el.shadowRoot.querySelectorAll(&amp;apos;*&amp;apos;));            }        }    };	if(root.shadowRoot != null) {		findAllElements(root.shadowRoot.querySelectorAll(&amp;apos;*&amp;apos;));	}    findAllElements(root.querySelectorAll(&amp;apos;*&amp;apos;));    return selector ? allElements.filter(el =&amp;gt; el.matches(selector)) : allElements;}function collectAllElementsEvaluateDeep(selector, root) {    var allElements = [];    while (selector.indexOf(&amp;apos;/&amp;apos;)==0 &amp;amp;&amp;amp; selector.search(&amp;apos;/&amp;apos;) != -1) {    	selector = selector.replace(&amp;apos;/&amp;apos;,&amp;apos;&amp;apos;);    }        allElementsInDocument = collectAllElementsQuerySelectorDeep(&amp;apos;*&amp;apos;, root);    const findAllElements = function(nodes) {        for (i=0; i&amp;lt;nodes.length; i++) {        	test_node = document.createElement(&amp;apos;test-node&amp;apos;);        	parent_node = nodes[i].parentNode;        	if (parent_node != null &amp;amp;&amp;amp; parent_node.nodeName != &amp;apos;HTML&amp;apos; &amp;amp;&amp;amp; parent_node.nodeName != &amp;apos;#document&amp;apos;) {        		cloned_node = nodes[i].cloneNode();        		if (nodes[i].textContent != &amp;quot;&amp;quot;) {        			cloned_node.textContent = nodes[i].textContent;         		}        		test_node.append(cloned_node);            	elements = document.evaluate(&amp;quot;.//&amp;quot;+selector, test_node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);            	while ((element=elements.iterateNext()) != null) {					if (!allElements.filter((value) =&amp;gt; value == nodes[i]).length &amp;gt; 0) {						allElements.push(nodes[i]);					}                }        	}        	elements = document.evaluate(&amp;quot;.//&amp;quot;+selector, nodes[i], null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);            while ((element=elements.iterateNext()) != null) {            	if (!allElements.filter((value) =&amp;gt; value == element).length &amp;gt; 0) {					allElements.push(element);				}            }        }    };    findAllElements(allElementsInDocument);    return allElements;}function collectElementEvaluateDeep(selector, root) {    var element = null;    while (selector.indexOf(&amp;apos;/&amp;apos;)==0 &amp;amp;&amp;amp; selector.search(&amp;apos;/&amp;apos;) != -1) {    	selector = selector.replace(&amp;apos;/&amp;apos;,&amp;apos;&amp;apos;);    }        allElementsInDocument = collectAllElementsQuerySelectorDeep(&amp;apos;*&amp;apos;, root);    const findAllElements = function(nodes) {        for (i=0; i&amp;lt;nodes.length; i++) {        	test_node = document.createElement(&amp;apos;test-node&amp;apos;);        	parent_node = nodes[i].parentNode;        	if (parent_node != null &amp;amp;&amp;amp; parent_node.nodeName != &amp;apos;HTML&amp;apos; &amp;amp;&amp;amp; parent_node.nodeName != &amp;apos;#document&amp;apos;) {        		cloned_node = nodes[i].cloneNode();        		if (nodes[i].textContent != &amp;quot;&amp;quot;) {        			cloned_node.textContent = nodes[i].textContent;         		}        		test_node.append(cloned_node);            	elements = document.evaluate(&amp;apos;.//&amp;apos;+selector, test_node, null, XPathResult.FIRST_ORDERED_NODE_TYPE);            	value = elements.singleNodeValue;            	if (value!=null) {            		element = nodes[i];            		break;            	}        	}        	elements = document.evaluate(&amp;apos;.//&amp;apos;+selector, nodes[i], null, XPathResult.FIRST_ORDERED_NODE_TYPE);        	value = elements.singleNodeValue;        	if (value!=null) {        		element = elements.singleNodeValue;        		break;        	}        }    };    findAllElements(allElementsInDocument);    return element;}return getXPathObject(&amp;quot;//*[@id=&amp;apos;email-input&amp;apos;])&amp;quot;);, args=[]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 121.0.6167.184, chrome: {chromedriverVersion: 121.0.6167.184 (057a8ae7deb..., userDataDir: C:\Users\junit\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:50668}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:50668/devtoo..., se:cdpVersion: 121.0.6167.184, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 01086941784253a02c62d347260a2676">
      <![CDATA[org.openqa.selenium.InvalidElementStateException: invalid element state: Failed to execute 'evaluate' on 'Document': The string './/*[@id='email-input'])' is not a valid XPath expression.
  (Session info: chrome=121.0.6167.184)
Build info: version: '4.17.0', revision: 'e52b1be057*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [01086941784253a02c62d347260a2676, executeScript {script=var getShadowElement = function getShadowElement(object,selector) {if (object.shadowRoot !=null) {return object.shadowRoot.querySelector(selector);} else {return null;}};var getAllShadowElement = function getAllShadowElement(object,selector) {return object.shadowRoot.querySelectorAll(selector);};var getAttribute = function getAttribute(object,attribute) {return object.getAttribute(attribute);};var isVisible = function isVisible(object) {var visible = object.offsetWidth;if(visible>0) {return true;} else {return false;}};var scrollTo = function scrollTo(object) {object.scrollIntoView({block: "center", inline: "nearest"});};var getParentElement = function getParentElement(object) {if(object.parentNode.nodeName=="#document-fragment") {return object.parentNode.host;} else if(object.nodeName=="#document-fragment") {return object.host;} else {return object.parentElement;}};var getChildElements = function getChildElements(object) {elements = null;if(object.nodeName=="#document-fragment") {elements = object.children;} else {elements = object.children;}if (object.shadowRoot!=null && elements.length==0){elements = object.shadowRoot.children;}return elements;};var getSiblingElements = function getSiblingElements(object) {if(object.nodeName == "#document-fragment") {return object.host.children;} else {if(object.parentNode.nodeName=="#document-fragment") {return object.parentNode.children;} else {return object.parentElement.children;}}};var getSiblingElement = function getSiblingElement(object, selector) {if(object.nodeName=="#document-fragment") {return object.host.querySelector(selector);} else {if(object.parentNode.nodeName=="#document-fragment") {return object.parentNode.querySelector(selector);} else {return object.parentElement.querySelector(selector);}}};var getNextSiblingElement = function getNextSiblingElement(object) {if(object.nodeName=="#document-fragment") {return object.host.firstElementChild.nextElementSibling;} else {return object.nextElementSibling;}};var getPreviousSiblingElement = function getPreviousSiblingElement(object) {if(object.nodeName=="#document-fragment") {return null;} else {return object.previousElementSibling;}};var isChecked = function isChecked(object) {return object.checked;};var isDisabled = function isDisabled(object) {return object.disabled;};var findCheckboxWithLabel = function findCheckboxWithLabel(label, root=document) {if(root.nodeName=="PAPER-CHECKBOX") {if(root.childNodes[0].data.trimStart().trimEnd()==label) {return root;}} else {let all_checkbox = getAllObject("paper-checkbox", root);for (let checkbox of all_checkbox) {if(checkbox.childNodes[0].data.trimStart().trimEnd()==label) {return checkbox;}}}};var findRadioWithLabel = function findRadioWithLabel(label, root=document) {if(root.nodeName=="PAPER-RADIO-BUTTON") {if(root.childNodes[0].data.trimStart().trimEnd()==label) {return root;}} else {let all_radio = getAllObject("paper-radio-button", root);for (let radio of all_radio) {if(radio.childNodes[0].data.trimStart().trimEnd()==label) {return radio;}}}};var selectCheckbox = function selectCheckbox(label, root=document) {let checkbox = findCheckboxWithLabel(label, root);if(!checkbox.checked) {checbox.click();}};var selectRadio = function selectRadio(label, root=document) {let radio = findCheckboxWithLabel(label, root);if(!radio.checked) {radio.click();}};var selectDropdown = function selectDropdown(label, root=document) {if(root.nodeName=="PAPER-LISTBOX") {root.select(label);} else {let listbox = getAllObject("paper-listbox", root);listbox.select(label);}};var evaluateAllDeep = function evaluateAllDeep(selector, root) {if(root==undefined) {return collectAllElementsEvaluateDeep(selector, document);} else {return collectAllElementsEvaluateDeep(selector, root);}};var evaluateDeep = function evaluateDeep(selector, root) {if(root==undefined) {return collectElementEvaluateDeep(selector, document);} else {return collectElementEvaluateDeep(selector, root);}};var getXPathObject = function getXPathObject(selector, root = document) {while (selector.search(/\//)!= 0 && selector.search(/\//)!= -1) {    selector = selector.replace(/\//,'//');    }    while (selector.search(/\/\//)==0 && selector.search(/\/\//) != -1) {    selector = selector.replace(/\/\//,'');    }splitedSelectors = selector.split('//');webElement = root;    for (let index = 0; index < splitedSelectors.length-1; index++) {        webElement = evaluateDeep(splitedSelectors[index], webElement);        if (webElement === undefined) {            throw new ElementNotFoundException("Element with XPath "+splitedSelectors[index]+" couldn't be found.");        }    }    webElement = evaluateDeep(splitedSelectors[splitedSelectors.length-1], webElement);    return webElement;};var getXPathAllObject = function getXPathAllObject(selector, root = document) {while (selector.search(/\//)!= 0 && selector.search(/\//)!= -1) {    selector = selector.replace(/\//,'//');    }    while (selector.search(/\/\//)==0 && selector.search(/\/\//) != -1) {    selector = selector.replace(/\/\//,'');    }splitedSelectors = selector.split('//');    webElement = root;    for (let index = 0; index < splitedSelectors.length-1; index++) {        webElement = evaluateDeep(splitedSelectors[index], webElement);        if (webElement === undefined) {            return null;        }    }    webElement = evaluateAllDeep(splitedSelectors[splitedSelectors.length-1], webElement);    return webElement;};var querySelectorAllDeep = function querySelectorAllDeep(selector, root) {if(root==undefined) {return _querySelectorDeep(selector, true, document);} else {return _querySelectorDeep(selector, true, root);}};var querySelectorDeep = function querySelectorDeep(selector, root) {if(root==undefined) {return _querySelectorDeep(selector, false, document);} else {return _querySelectorDeep(selector, false, root);}};var ElementNotFoundException = function ElementNotFoundException(message = "Not found") {  this.message = message;  this.name = 'ElementNotFoundException';};var getObject = function getObject(selector, root = document) {    const multiLevelSelectors = splitByCharacterUnlessQuoted(selector, '>');    webElement = root;    for (let index = 0; index < multiLevelSelectors.length-1; index++) {        webElement = querySelectorDeep(multiLevelSelectors[index], webElement);        if (webElement === undefined) {            throw new ElementNotFoundException("Element with CSS "+multiLevelSelectors[index]+" couldn't be found.");        }    }    webElement = querySelectorDeep(multiLevelSelectors[multiLevelSelectors.length-1], webElement);    return webElement;};var getAllObject = function getAllObject(selector, root = document) {    const multiLevelSelectors = splitByCharacterUnlessQuoted(selector, '>');    webElement = root;    for (let index = 0; index < multiLevelSelectors.length-1; index++) {        webElement = querySelectorDeep(multiLevelSelectors[index], webElement);        if (webElement === undefined) {            return null;        }    }    webElement = querySelectorAllDeep(multiLevelSelectors[multiLevelSelectors.length-1], webElement);    return webElement;};function _querySelectorDeep(selector, findMany, root) {    let lightElement = root.querySelector(selector);    if (document.head.createShadowRoot || document.head.attachShadow) {        if (!findMany && lightElement) {            return lightElement;        }        const selectionsToMake = splitByCharacterUnlessQuoted(selector, ',');        return selectionsToMake.reduce((acc, minimalSelector) => {            if (!findMany && acc) {                return acc;            }            const splitSelector = splitByCharacterUnlessQuoted(minimalSelector                    .replace(/^\s+/g, '')                    .replace(/\s*([>+~]+)\s*/g, '$1'), ' ')                .filter((entry) => !!entry);            const possibleElementsIndex = splitSelector.length - 1;            const possibleElements = collectAllElementsQuerySelectorDeep(splitSelector[possibleElementsIndex], root);            const findElements = findMatchingElement(splitSelector, possibleElementsIndex, root);            if (findMany) {                acc = acc.concat(possibleElements.filter(findElements));                return acc;            } else {                acc = possibleElements.find(findElements);                return acc;            }        }, findMany ? [] : null);    } else {        if (!findMany) {            return lightElement;        } else {            return root.querySelectorAll(selector);        }    }}function findMatchingElement(splitSelector, possibleElementsIndex, root) {    return (element) => {        let position = possibleElementsIndex;        let parent = element;        let foundElement = false;        while (parent) {            const foundMatch = parent.matches(splitSelector[position]);            if (foundMatch && position === 0) {                foundElement = true;                break;            }            if (foundMatch) {                position--;            }            parent = findParentOrHost(parent, root);        }        return foundElement;    };}function splitByCharacterUnlessQuoted(selector, character) {    return selector.match(/\\?.|^$/g).reduce((p, c) => {        if (c === '"' && !p.sQuote) {            p.quote ^= 1;            p.a[p.a.length - 1] += c;        } else if (c === '\'' && !p.quote) {            p.sQuote ^= 1;            p.a[p.a.length - 1] += c;        } else if (!p.quote && !p.sQuote && c === character) {            p.a.push('');        } else {            p.a[p.a.length - 1] += c;        }        return p;    }, { a: [''] }).a;}function findParentOrHost(element, root) {    const parentNode = element.parentNode;    return (parentNode && parentNode.host && parentNode.nodeType === 11) ? parentNode.host : parentNode === root ? null : parentNode;}function collectAllElementsQuerySelectorDeep(selector = null, root) {    const allElements = [];    const findAllElements = function(nodes) {        for (let i = 0, el; el = nodes[i]; ++i) {            allElements.push(el);            if (el.shadowRoot) {                findAllElements(el.shadowRoot.querySelectorAll('*'));            }        }    };if(root.shadowRoot != null) {findAllElements(root.shadowRoot.querySelectorAll('*'));}    findAllElements(root.querySelectorAll('*'));    return selector ? allElements.filter(el => el.matches(selector)) : allElements;}function collectAllElementsEvaluateDeep(selector, root) {    var allElements = [];    while (selector.indexOf('/')==0 && selector.search('/') != -1) {    selector = selector.replace('/','');    }        allElementsInDocument = collectAllElementsQuerySelectorDeep('*', root);    const findAllElements = function(nodes) {        for (i=0; i<nodes.length; i++) {        test_node = document.createElement('test-node');        parent_node = nodes[i].parentNode;        if (parent_node != null && parent_node.nodeName != 'HTML' && parent_node.nodeName != '#document') {        cloned_node = nodes[i].cloneNode();        if (nodes[i].textContent != "") {        cloned_node.textContent = nodes[i].textContent;         }        test_node.append(cloned_node);            elements = document.evaluate(".//"+selector, test_node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);            while ((element=elements.iterateNext()) != null) {if (!allElements.filter((value) => value == nodes[i]).length > 0) {allElements.push(nodes[i]);}                }        }        elements = document.evaluate(".//"+selector, nodes[i], null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);            while ((element=elements.iterateNext()) != null) {            if (!allElements.filter((value) => value == element).length > 0) {allElements.push(element);}            }        }    };    findAllElements(allElementsInDocument);    return allElements;}function collectElementEvaluateDeep(selector, root) {    var element = null;    while (selector.indexOf('/')==0 && selector.search('/') != -1) {    selector = selector.replace('/','');    }        allElementsInDocument = collectAllElementsQuerySelectorDeep('*', root);    const findAllElements = function(nodes) {        for (i=0; i<nodes.length; i++) {        test_node = document.createElement('test-node');        parent_node = nodes[i].parentNode;        if (parent_node != null && parent_node.nodeName != 'HTML' && parent_node.nodeName != '#document') {        cloned_node = nodes[i].cloneNode();        if (nodes[i].textContent != "") {        cloned_node.textContent = nodes[i].textContent;         }        test_node.append(cloned_node);            elements = document.evaluate('.//'+selector, test_node, null, XPathResult.FIRST_ORDERED_NODE_TYPE);            value = elements.singleNodeValue;            if (value!=null) {            element = nodes[i];            break;            }        }        elements = document.evaluate('.//'+selector, nodes[i], null, XPathResult.FIRST_ORDERED_NODE_TYPE);        value = elements.singleNodeValue;        if (value!=null) {        element = elements.singleNodeValue;        break;        }        }    };    findAllElements(allElementsInDocument);    return element;}return getXPathObject("//*[@id='email-input'])");, args=[]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 121.0.6167.184, chrome: {chromedriverVersion: 121.0.6167.184 (057a8ae7deb..., userDataDir: C:\Users\junit\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:50668}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:50668/devtoo..., se:cdpVersion: 121.0.6167.184, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 01086941784253a02c62d347260a2676
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:185)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:134)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:51)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:519)
at org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:464)
at io.github.sukgu.Shadow.injectShadowExecuter(Shadow.java:70)
at io.github.sukgu.Shadow.executerGetObject(Shadow.java:109)
at io.github.sukgu.Shadow.elementByXPath(Shadow.java:383)
at io.github.sukgu.Shadow.lambda$findElementByXPath$0(Shadow.java:435)
at java.base/java.util.Arrays$ArrayList.forEach(Arrays.java:4204)
at io.github.sukgu.Shadow.findElementByXPath(Shadow.java:434)
at com.ageoflen.qa.pages.AbcHomePage.signUpButtonClick(AbcHomePage.java:19)
at com.ageoflen.qa.testscases.AbcHomeTest.signUpButtonClick(AbcHomeTest.java:29)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 32 stack frames]]>
    </failure>
  </testcase> <!-- signUpButtonClick -->
  <testcase classname="com.ageoflen.qa.testscases.AbcRegistrationTest" name="verifyRegPageURLTest" time="0.001">
    <failure type="java.lang.NullPointerException" message="Cannot invoke &amp;quot;com.ageoflen.qa.pages.AbcRegisterPage.verifySignUpPageURL()&amp;quot; because &amp;quot;this.abcRegPage&amp;quot; is null">
      <![CDATA[java.lang.NullPointerException: Cannot invoke "com.ageoflen.qa.pages.AbcRegisterPage.verifySignUpPageURL()" because "this.abcRegPage" is null
at com.ageoflen.qa.testscases.AbcRegistrationTest.verifyRegPageURLTest(AbcRegistrationTest.java:24)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 27 stack frames]]>
    </failure>
  </testcase> <!-- verifyRegPageURLTest -->
  <testcase classname="com.ageoflen.qa.testscases.AbcRegistrationTest" name="enterEmailRegPageTest" time="0.002">
    <failure type="java.lang.NullPointerException" message="Cannot invoke &amp;quot;com.ageoflen.qa.pages.AbcRegisterPage.enterEmailAddress()&amp;quot; because &amp;quot;this.abcRegPage&amp;quot; is null">
      <![CDATA[java.lang.NullPointerException: Cannot invoke "com.ageoflen.qa.pages.AbcRegisterPage.enterEmailAddress()" because "this.abcRegPage" is null
at com.ageoflen.qa.testscases.AbcRegistrationTest.enterEmailRegPageTest(AbcRegistrationTest.java:31)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 27 stack frames]]>
    </failure>
  </testcase> <!-- enterEmailRegPageTest -->
  <testcase classname="com.ageoflen.qa.testscases.AbcRegistrationTest" name="submitButtonClickTest" time="0.001">
    <failure type="java.lang.NullPointerException" message="Cannot invoke &amp;quot;com.ageoflen.qa.pages.AbcRegisterPage.SubmitButtonClick()&amp;quot; because &amp;quot;this.abcRegPage&amp;quot; is null">
      <![CDATA[java.lang.NullPointerException: Cannot invoke "com.ageoflen.qa.pages.AbcRegisterPage.SubmitButtonClick()" because "this.abcRegPage" is null
at com.ageoflen.qa.testscases.AbcRegistrationTest.submitButtonClickTest(AbcRegistrationTest.java:37)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 27 stack frames]]>
    </failure>
  </testcase> <!-- submitButtonClickTest -->
  <testcase classname="com.ageoflen.qa.testscases.AbcRegistrationTest" name="submitButtonClickTest" time="0.004">
    <failure type="org.openqa.selenium.NoSuchWindowException" message="no such window: target window already closed
from unknown error: web view not found
  (Session info: chrome=121.0.6167.184)
Build info: version: &amp;apos;4.17.0&amp;apos;, revision: &amp;apos;e52b1be057*&amp;apos;
System info: os.name: &amp;apos;Windows 11&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;10.0&amp;apos;, java.version: &amp;apos;17.0.10&amp;apos;
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [01086941784253a02c62d347260a2676, screenshot {}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 121.0.6167.184, chrome: {chromedriverVersion: 121.0.6167.184 (057a8ae7deb..., userDataDir: C:\Users\junit\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:50668}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:50668/devtoo..., se:cdpVersion: 121.0.6167.184, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 01086941784253a02c62d347260a2676">
      <![CDATA[org.openqa.selenium.NoSuchWindowException: no such window: target window already closed
from unknown error: web view not found
  (Session info: chrome=121.0.6167.184)
Build info: version: '4.17.0', revision: 'e52b1be057*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [01086941784253a02c62d347260a2676, screenshot {}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 121.0.6167.184, chrome: {chromedriverVersion: 121.0.6167.184 (057a8ae7deb..., userDataDir: C:\Users\junit\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:50668}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:50668/devtoo..., se:cdpVersion: 121.0.6167.184, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 01086941784253a02c62d347260a2676
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:185)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:134)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:51)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:519)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:592)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:596)
at org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:322)
at com.ageoflen.qa.base.TestBase.failed(TestBase.java:81)
at com.ageoflen.qa.util.ListenersTestNG.onTestFailure(ListenersTestNG.java:34)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 29 stack frames]]>
    </failure>
  </testcase> <!-- submitButtonClickTest -->
</testsuite> <!-- Age Of Learning Test Suite -->
